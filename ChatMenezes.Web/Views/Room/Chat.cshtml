@model ChatViewModel
@using ChatMenezes.Web.Models.ViewModels.RoomViewModel

@{
    Layout = "~/Views/Shared/_LayoutNovo.cshtml";
    ViewData["ControllerVoltar"] = "Rooms";
}

<div class="row">
    <div class="col-lg-12">
        <div class="row">
            <div class="col-md-12 mb-lg-0 mb-4">
                <div class="card">
                    <div class="card-header pb-0">
                        <div class="row">
                            <div class="col-6 d-flex align-items-center">
                                <h6 class="mb-0">Room: @Model.Room.Name</h6>
                            </div>                            
                        </div>
                    </div>
                    <div class="card-body p-3">
                        <div class="row">
                            <div class="col-md-10 mb-md-0 mb-2">
                                <input type="hidden" class="form-control" id="roomId" value="@Model.Room.Id" />
                                <label class="control-label">Message (To find the quote, type "/stock={stockCode}")</label>
                                <input type="text" class="form-control" id="messageInput"/>
                            </div>
                            <div class="col-md-2 mt-4">
                                <button class="btn bg-gradient-dark" id="btnSendMessage">Send</button>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <ul class="navbar-nav" id="messagesList"></>
                            </div>
                        </div>
                    </div>                    
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.19/signalr.min.js"></script>

    <script type="text/javascript">

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chathub")
            .build();

        let messageHistory = [];

        connection.on("ReceiveMessage", (user, date, messageText) => {
            messageHistory.unshift({ user, date, messageText });

            if (messageHistory.length > 50) {
                messageHistory = messageHistory.slice(0, 50);
            }

            updateMessageList();
        });

        function updateMessageList() {
            const $messagesList = $("#messagesList");
            $messagesList.empty();

            messageHistory.forEach(message => {
                const $li = $("<li></li>");

                const $userSpan = $("<span></span>").addClass("message-user").text(message.user + " ");
                const $dateSpan = $("<span></span>").addClass("message-date").text("(" + new Date(message.date).toLocaleString() + "): ");
                const $messageSpan = $("<span></span>").addClass("message-text").text(message.messageText);

                $li.append($userSpan);
                $li.append($dateSpan);
                $li.append($messageSpan);

                $messagesList.append($li); 
            });
        }

        connection.start().then(() => {
            joinRoom();
        }).catch(err => console.error(err.toString()));

        function joinRoom() {
            const roomId = $("#roomId").val();
            connection.invoke("JoinRoom", roomId).catch(err => console.error(err.toString()));
        }

        $(function () {

            $('#btnSendMessage').click(function () {
                const roomId = $("#roomId").val();
                const messageText = $("#messageInput").val();
                connection.invoke("SendMessage", roomId, messageText).catch(err => console.error(err.toString()));

                $("#messageInput").val("");
            });

        });

    </script>
}
